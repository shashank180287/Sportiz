Believe in deliver with quality, in time....To experience, give me a change

Over 6 years of experience in Java and J2EE technologies.
Delivered over 10 web application with HTML5 and JQuery.
Experience in Spring IoC and MVC, Hibernate
Experience in Maven and ANT
Experience in GIT, SVN and CVS
Delivered application hosted on Google App Engine connected Google DB.
Experience in NoSQL DBs like CouchDB and MongoDB 
Experience in Financial domain specially in OTC market
Delivered projects with automatic testing using JUnit, JMock and JMeter
Experience in scripting like shell and python
Worked on similar project:
https://www.youtube.com/watch?v=yQNtKriSQyE 


https://portal.aws.amazon.com/billing/signup?state=hashArgs%23%2Fpaymentinformation&type=resubscribe&isauthcode=true&code=K9lPAgNuBVvXkdhjJ8rRGFiZqagyV0DeilK7oDdidG9vyEgCjjGNKqu3verbK65OleMbWVNRX2wINzhEYQr4AFmwkXAREvVth5RCmfYmja8OzRNR525q4CJ5Gs5mHUHUrMOwXfm1blYOyyqlE8JNcxldcc_ce9qNLrR6SY8jL9itsKFYtqanaxZIU3OQVXKBWoOZDy8wQw6I0WhiWAkvq9Z3rERNAVT1QWlV9evUkoGDWIS-2rgZPQnx9LrpFnlSro40U1yXvILqpLwVuFYmKigxFU0z2eYWCDFFeYmbvzY-0WXkCduzH6gZFpNgvF1VY2g8QwTj4g3xIGkTk2AlyYbcHCtJxFB87994WEimJTGI3eKU2ygnGt6E5s8b84cLtFqeoMVmBLq8yzNg9wO6SRaptpp2lJYBN6YphYJgcMHYnIx9OBcmuvyIQnkMy1To75H1JZbmp8qhjbAUS93PZ3Yc2RsLjA6aLSc7sj7nunKG10ZTVubpA_ZLk1GqDQ1C8Tga3CxzWke5ifvKFj_pYe9M6tHgd53MPVrDYiwNm4IKDv3JkciE-6c0TsS135cgul9jR3aIHDdpWE9N9j5b_zPT1kqSO9Qbe2ZrqH8bZVNXRqtpNvU6MqJ68mSlQYv1RmOJRMD45OCjokD0GdfK6fJ0N49JI7NQLKjV-89azRNDk9O9Nk6VyEdA5D7oHSVb9Hx4IjbZg-VR-8H7l_Wf-WFsdD5Wq2IcJuj5jEVo7ePeiUB8gmbhGccVkgzKjJtlT1hrnfhr4VZflhk9f4ROv4RIqskmqiZIJybh-dqeU747Cdm03Jl-KusllnN7H43hTNOoqZulAi3vMcx7lieia-t8cPVlOQvC0ChWbIeuXgaUNOtVwQ9AEp3RawM0wqvCfoEK3nvIVgMvzyncceVZRiY_8wQQ-S5386lcuo_xc2bNcXcGqd2FKlmhgI2pqEycFz3XgmFW6odbG7NXQJllEsGrL2DGyaNbP0aUQnAG1ZSgn5oRmYQR0gfA_cjAFHrPRwKho8yeoAeRtK0eB4jVbVQYO1x0pnmLQX--0B6kaKANjgekeKk7gAn_B7A5P85T_UtWqpBIVMXnFDWRYY0cAZvFGpfuEJTwPkwTu1MnQEK-30a3TUpQn3-6mC9_2ygrM68mBPgtAfD1eOwUqpqRBIN8UxgD0chlk4b-kg#/paymentinformation


AWS Course:

Platja de la Barceloneta
Casa Milá
Casa Batlló 
Casa Amatller
Dinner on Barcelona’s waterfront
La Rambla
T10 Transport Ticket


A Classic Load Balancer is ideal for simple load balancing of traffic across multiple EC2 instances, while an Application Load Balancer is ideal for microservices or container-based architectures where there is a need to route traffic to multiple services or load balance across multiple ports on the same EC2 instance. Application Load Balancer supports Host-based and Path-based Routings. Classic LB does not support IPv6 in VPC but supports load balancing for the following TCP ports:
[EC2-VPC] 1-65535
[EC2-Classic] 25, 80, 443, 465, 587, 1024-65535
If you are using Amazon Virtual Private Cloud, you can configure security groups for the front-end of your Classic Load Balancers. Classic Load Balancers do not cap the number of connections that they can attempt to establish with your load balanced Amazon EC2 instances. Classic Load Balancers do not support instances launched using a paid AMI from Amazon DevPay site.

====Decision diagram in http://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-termination.html
Auto Scaling currently supports the following custom termination policies:

OldestInstance. Auto Scaling terminates the oldest instance in the group. This option is useful when you're upgrading the instances in the Auto Scaling group to a new EC2 instance type, so you can gradually replace instances of the old type with instances of the new type.
NewestInstance. Auto Scaling terminates the newest instance in the group. This policy is useful when you're testing a new launch configuration but don't want to keep it in production.
OldestLaunchConfiguration. Auto Scaling terminates instances that have the oldest launch configuration. This policy is useful when you're updating a group and phasing out the instances from a previous configuration.
ClosestToNextInstanceHour. Auto Scaling terminates instances that are closest to the next billing hour. This policy helps you maximize the use of your instances and manage costs.
Default. Auto Scaling uses its default termination policy. This policy is useful when you have more than one scaling policy associated with the group.
